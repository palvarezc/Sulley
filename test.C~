#include "RooExpOfPolyTimesX.h"
#include "RooExpOfPolyTimesX.cpp"
#include "RooStats/HistFactory/FlexibleInterpVar.h"
#include "RooStats/HistFactory/PiecewiseInterpolation.h"
#include "RooStats/HistFactory/HistFactorySimultaneous.h"
#include "RooStats/HistFactory/Channel.h"
#include "RooStats/HistFactory/MakeModelAndMeasurementsFast.h"
#include "RooStats/HistFactory/Measurement.h"
#include "RooStats/HistFactory/ParamHistFunc.h"
#include "RooStats/HistFactory/HistFactoryModelUtils.h"
#include "RooStats/HistFactory/RooBarlowBeestonLL.h"

using namespace std;
using namespace RooFit;
using namespace RooStats ;
using namespace HistFactory ;


void test()
{

  // gROOT->ProcessLine(".x RooExpOfPolyTimesX.cpp+");
  
string channelName = "B2Kee";
 int nGenJpsiLeak = 10;
 

   TFile *fw = new TFile("toy_result/workspaceMode7.root");   
   RooWorkspace* workspace = (RooWorkspace*)fw->Get("combined");   
   // RooRealVar nSignal("nSignal", "#signal events", 1.*nGenSignal, nGenSignal-7*sqrt(nGenSignal), nGenSignal+7*sqrt(nGenSignal));
   // RooRealVar nPartReco("nPartReco", "#nPartReco", 1.*nGenPartReco, nGenPartReco-7*sqrt(nGenPartReco), nGenPartReco+7*sqrt(nGenPartReco));
   // RooRealVar nComb("nComb", "#nComb", 1.*nGenComb, nGenComb-7*sqrt(nGenComb), nGenComb+7*sqrt(nGenComb));
   // RooRealVar nJpsiLeak("nJpsiLeak", "#nJpsiLeak", 1.*nGenJpsiLeak, nGenJpsiLeak-7*sqrt(nGenJpsiLeak), nGenJpsiLeak+7*sqrt(nGenJpsiLeak));
   // RooRealVar fracZero("fracZero", "fracZero",0.5,0,1);
   // RooRealVar fracOne("fracOne", "fracOne",0.5, 0,1);
   // RooFormulaVar fracPartReco("fracPartReco", "nPartReco/nSignal", RooArgList(nPartReco,nSignal));
   // RooFormulaVar fracOneRec("fracOneRec", "(1-fracZero)*fracOne", RooArgList(fracZero, fracOne));
   RooRealVar* nSignal = workspace->var("nSignal");
   RooRealVar* nPartReco = workspace->var("nPartReco");
   RooRealVar* nComb = workspace->var("nComb");
   RooRealVar* fracZero = workspace->var("fracZero");
   RooRealVar* fracOne = workspace->var("fracOne");
   RooRealVar* fracTwo = workspace->var("fracTwo");
   RooRealVar* nJpsiLeak = workspace->var("nJpsiLeak");
   RooRealVar *l1KeeGen = workspace->var("l1KeeGen");
   RooRealVar *l2KeeGen = workspace->var("l2KeeGen");
   RooRealVar *l3KeeGen = workspace->var("l3KeeGen");
   RooRealVar *l4KeeGen = workspace->var("l4KeeGen");
   RooRealVar *l5KeeGen = workspace->var("l5KeeGen");
   RooRealVar *l1Kee = workspace->var("l1Kee");
   RooRealVar *l2Kee = workspace->var("l2Kee");
   RooRealVar *l3Kee = workspace->var("l3Kee");
   RooRealVar *l4Kee = workspace->var("l4Kee");
   RooRealVar *l5Kee = workspace->var("l5Kee");
   RooRealVar *l1KeeSyst = workspace->var("l1KeeSyst");
   RooRealVar *l2KeeSyst = workspace->var("l2KeeSyst");
   RooRealVar *l3KeeSyst = workspace->var("l3KeeSyst");
   RooRealVar *l4KeeSyst = workspace->var("l4KeeSyst");
   RooRealVar *l5KeeSyst = workspace->var("l5KeeSyst");
   RooRealVar *fractionalErrorJpsiLeak = workspace->var("fractionalErrorJpsiLeak");
   RooFormulaVar fracPartReco("fracPartReco", "nPartReco/nSignal", RooArgList(*nPartReco,*nSignal));

   cout<<"VALUE OF l1Kee IN FIT: "<<l1Kee->getVal()<<" +- "<<l1Kee->getError()<<endl;
   cout<<"VALUE OF l2Kee IN FIT: "<<l2Kee->getVal()<<" +- "<<l2Kee->getError()<<endl;
   cout<<"VALUE OF l3Kee IN FIT: "<<l3Kee->getVal()<<" +- "<<l3Kee->getError()<<endl;
   cout<<"VALUE OF l4Kee IN FIT: "<<l4Kee->getVal()<<" +- "<<l4Kee->getError()<<endl;
   cout<<"VALUE OF l5Kee IN FIT: "<<l5Kee->getVal()<<" +- "<<l5Kee->getError()<<endl;

   // Get observables
   ModelConfig *mc = (ModelConfig*) workspace->obj("ModelConfig");
   RooArgSet *obs = (RooArgSet*) mc->GetObservables();
   RooRealVar *B_plus_M = (RooRealVar*) obs->find(("obs_x_"+channelName).c_str());
   RooRealVar *misPT = (RooRealVar*) obs->find(("obs_y_"+channelName).c_str());
   // B_plus_M->SetNameTitle("B_plus_M", "B_plus_M");
   B_plus_M->SetTitle("B_plus_M");
   B_plus_M->setUnit("MeV/c^{2}");
   // misPT->SetNameTitle("misPT", "misPT");
   misPT->SetTitle("misPT");
   misPT->setUnit("MeV/c");

   cout<<"B_plus_M nbins: "<<B_plus_M->getBins("default")<<endl;
   cout<<"misPT nbins: "<<misPT->getBins("default")<<endl;
   
  // //***********Set Binning
  
  // RooBinning defaultMBins(floor(16), B_plus_M->getMin(), B_plus_M->getMax() ); 
  // RooBinning defaultMisPTBins(floor(40), misPT->getMin(), misPT->getMax()); 

  // B_plus_M->setBinning( defaultMBins);
  // misPT->setBinning( defaultMisPTBins );


  //***************** Build model
   
   // Get HistFactory pdf (no combinatorial)
   RooSimultaneous *model_nocomb = (RooSimultaneous*)mc->GetPdf();
   RooArgList obsTerms;
   RooArgList pois_constraints;
   FactorizeHistFactoryPdf(*obs, *model_nocomb, obsTerms, pois_constraints);

   RooRealSumPdf* model_nocomb_pdf = ( RooRealSumPdf*) obsTerms.first();
   
   RooArgList *model_nocomb_pdf_coefList = (RooArgList*) model_nocomb_pdf->coefList().Clone();
   RooArgList *model_nocomb_pdf_funcList = (RooArgList*) model_nocomb_pdf->funcList().Clone();


   // Define combinatorial model

   RooExpOfPolyTimesX *combPDF_unnorm =  new RooExpOfPolyTimesX("combPDF_unnorm", "combPDF_unnorm", 
                                                                *B_plus_M, *misPT, *l1Kee, *l2Kee, *l3Kee, *l4Kee, *l5Kee);

   RooAbsReal *combIntegral = combPDF_unnorm->createIntegral(RooArgSet(*B_plus_M, *misPT));
   combIntegral->SetNameTitle("combIntegral","combIntegral");
   RooFormulaVar *combNorm = new RooFormulaVar("combNorm","1./combIntegral",RooArgList(*combIntegral));
   RooProduct *combPDF = new RooProduct("combPDF","combPDF",RooArgList(*combPDF_unnorm,*combNorm));  

   model_nocomb_pdf_coefList->add(*nComb);
   model_nocomb_pdf_funcList->add(*combPDF_unnorm);

   // Combined model
   RooRealSumPdf *model_pdf = new RooRealSumPdf((channelName+"_comb").c_str(),(channelName+"_comb").c_str(),
                                                *model_nocomb_pdf_funcList,*model_nocomb_pdf_coefList,1);  
   model_pdf->specialIntegratorConfig(kTRUE)->method1D().setLabel("RooBinIntegrator") ;
   model_pdf->specialIntegratorConfig(kTRUE)->method2D().setLabel("RooBinIntegrator") ;
   model_pdf->specialIntegratorConfig(kTRUE)->methodND().setLabel("RooBinIntegrator") ;
   model_pdf->forceNumInt();
   model_pdf->setAttribute("GenerateBinned"); // for use with RooSimultaneous::generate in mixed mode

   // Add constraints
   RooArgList *model_and_constraints = (RooArgList*)pois_constraints.Clone();
   model_and_constraints->add(*model_pdf);
   RooProdPdf *model_pdf_constrain = new RooProdPdf("RK_kinematic_comb_constrain","RK_kinematic_comb_constrain",*model_and_constraints);

   // Total model
   RooCategory *idx = (RooCategory*) obs->find("channelCat");
   RooSimultaneous model("modified_pdf","modified_pdf",*idx);
   model.addPdf(*model_pdf_constrain,idx->getLabel());  
   // model.addPdf(*model_nocomb_pdf,idx->getLabel());  

   HistFactorySimultaneous totPdf( model );
   totPdf.SetNameTitle("totPdf", "totPdf");
   

   //***************** Get data

   cout<<"CACA2"<<endl;
   RooWorkspace* workspaceGen = (RooWorkspace*)fw->Get("workspaceGen");
   cout<<"CACA2a"<<endl;
   RooDataSet* dataGenSignalZeroGamma = (RooDataSet*)workspaceGen->data("dataGenSignalZeroGamma");
   cout<<"CACA2b"<<endl;
   RooDataSet* dataGenSignalOneGamma = (RooDataSet*)workspaceGen->data("dataGenSignalOneGamma");
   RooDataSet* dataGenSignalTwoGamma = (RooDataSet*)workspaceGen->data("dataGenSignalTwoGamma");
   RooDataSet* dataGenPartReco = (RooDataSet*)workspaceGen->data("dataGenPartReco");
   cout<<"CACA2c"<<endl;
   RooDataSet* dataGenComb = (RooDataSet*)workspaceGen->data("dataGenComb");
   cout<<"CACA2d"<<endl;
   RooDataSet* dataGenJpsiLeak(0);
   if(nGenJpsiLeak>0) dataGenJpsiLeak = (RooDataSet*)workspaceGen->data("dataGenJpsiLeak");


   cout<<"CACA3"<<endl;


   // if(wantplot)
   // {
   //    //**************Must get the datasets

   //    RooDataSet* dataSetSignalZeroGamma = (RooDataSet*)workspace->data("dataSetSignalZeroGamma");
   //    RooDataSet* dataSetSignalOneGamma = (RooDataSet*)workspace->data("dataSetSignalOneGamma");
   //    RooDataSet* dataSetSignalTwoGamma = (RooDataSet*)workspace->data("dataSetSignalTwoGamma");
   //    RooDataSet* dataSetPartReco = (RooDataSet*)workspace->data("dataSetPartReco");
   //    RooDataSet* dataSetComb = (RooDataSet*)workspace->data("dataSetComb");
   //    RooDataSet* dataSetJpsiLeak = (RooDataSet*)workspace->data("dataSetJpsiLeak");

   //    //**************Plot all the different components
   // cout<<"CACA4"<<endl;

   //    cout<<"dataGenSignalZeroGamma: "<<dataGenSignalZeroGamma<<endl;
   //    PlotShape(*dataSetSignalZeroGamma, *dataGenSignalZeroGamma, *histPdfSignalZeroGamma, plotsfile, "cSignalZeroGamma", *B_plus_M, *misPT);
   //    PlotShape(*dataSetSignalOneGamma, *dataGenSignalOneGamma, *histPdfSignalOneGamma, plotsfile, "cSignalOneGamma", *B_plus_M, *misPT);
   //    PlotShape(*dataSetSignalTwoGamma, *dataGenSignalTwoGamma, *histPdfSignalTwoGamma, plotsfile, "cSignalTwoGamma", *B_plus_M, *misPT);
   //    PlotShape(*dataSetPartReco, *dataGenPartReco, *histPdfPartReco, plotsfile, "cPartReco", *B_plus_M, *misPT);
   //    PlotShape(*dataSetComb, *dataGenComb, *combPDF, plotsfile, "cComb", *B_plus_M, *misPT);
   //    PlotShape(*dataSetComb, *dataGenComb, *histPdfComb, plotsfile, "cCombTemplate", *B_plus_M, *misPT);

   // cout<<"CACA5"<<endl;
   //    if(nGenJpsiLeak>1) PlotShape(*dataSetJpsiLeak, *dataGenJpsiLeak, *histPdfJpsiLeak, plotsfile, "cJpsiLeak", *B_plus_M, *misPT);
   // }

   //***************Merge datasets

   cout<<"CACA6"<<endl;
   RooDataSet* dataGenTot_chan(dataGenPartReco);
   dataGenTot_chan->append(*dataGenSignalZeroGamma);
   dataGenTot_chan->append(*dataGenSignalOneGamma);
   dataGenTot_chan->append(*dataGenSignalTwoGamma);
   dataGenTot_chan->append(*dataGenComb);
   if(nGenJpsiLeak>0) dataGenTot_chan->append(*dataGenJpsiLeak);

   RooDataHist *dataGenTot_chan_bin = dataGenTot_chan->binnedClone();
   RooDataHist *dataGenTot = new RooDataHist("dataGenTot","dataGenTot",RooArgSet(*B_plus_M, *misPT),
                                             Index(*idx),Import(idx->getLabel(),*dataGenTot_chan_bin));

   cout<<"Binned data number of bins: "<<dataGenTot->numEntries()<<endl;
   

   //**************Setup constant parameters
  // ((RooRealVar*)(mc->GetNuisanceParameters()->find("fzero")))->setConstant(kTRUE);
  // ((RooRealVar*)(mc->GetNuisanceParameters()->find("fone")))->setConstant(kTRUE);
  ((RooRealVar*)(mc->GetNuisanceParameters()->find("fracZero")))->setConstant(kTRUE);
  ((RooRealVar*)(mc->GetNuisanceParameters()->find("fracOne")))->setConstant(kTRUE);
  ((RooRealVar*)(mc->GetNuisanceParameters()->find("fracTwo")))->setConstant(kTRUE);
  ((RooRealVar*)(mc->GetNuisanceParameters()->find("mcNorm_sigzero")))->setConstant(kTRUE);
  ((RooRealVar*)(mc->GetNuisanceParameters()->find("mcNorm_sigone")))->setConstant(kTRUE);
  ((RooRealVar*)(mc->GetNuisanceParameters()->find("mcNorm_sigtwo")))->setConstant(kTRUE);
  ((RooRealVar*)(mc->GetNuisanceParameters()->find("mcNorm_partreco")))->setConstant(kTRUE);
  ((RooRealVar*)(mc->GetNuisanceParameters()->find("Lumi")))->setConstant(kTRUE);
   cout<<"CACA7"<<endl;
  

   
   
   cout<<"CACA10"<<endl;
   //Extra TEST CONSTRAINT


   //RooRealVar combConstMean("combConstMean", "combConstMean", nGenComb);
   //RooRealVar combConstSigma("combConstSigma", "combConstSigma", 7.7);
   //RooGaussian combConst("combConst", "combConst", nComb, combConstMean, combConstSigma);

   //**************** fit
   
   RooAbsReal::defaultIntegratorConfig()->setEpsAbs(1e-8) ;
   RooAbsReal::defaultIntegratorConfig()->setEpsRel(1e-8) ;



   RooArgList* gammas = new RooArgList();
   ParamHistFunc* param_func=NULL;
   // bool hasStatUncert = getStatUncertaintyFromChannel(model_nocomb_pdf , param_func, gammas );
   bool hasStatUncert = getStatUncertaintyFromChannel(model_pdf_constrain , param_func, gammas );

   cout<< "Param_func nbins: "<<param_func->numBins()<<endl;
   

   RooAbsReal* nll = totPdf.createNLL(*dataGenTot, Offset(kTRUE), Verbose(kTRUE));
   nll->SetNameTitle("nll_hf","nll_hf");
   

   RooPlot *m_frame = B_plus_M->frame(Title("M(B)"));
   RooPlot *pt_frame = misPT->frame(Title("misPT"));

   dataGenTot->plotOn(m_frame,Name("Data"),DataError(RooAbsData::Poisson),Cut("channelCat==0"),MarkerSize(0.6),DrawOption("ZP"));
   dataGenTot->plotOn(pt_frame,Name("Data"),DataError(RooAbsData::Poisson),Cut("channelCat==0"),MarkerSize(0.6),DrawOption("ZP"));

  TCanvas *c1 = new TCanvas("c1","c1",1100,600);
  c1->Divide(2,1);
  c1->cd(1);  
  m_frame->Draw();

  c1->cd(2);  
  pt_frame->Draw();

  RooArgSet *temp = new RooArgSet();
  nll->getParameters(temp)->Print("V");
  cout << "**********************************************************************" << endl;

  // c1->SaveAs("toy_result/test.pdf");
  
  cout<<"Eval nll: "<<nll->getVal()<<endl;
  
}
