/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooPTMVis.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

//ClassImp(RooPTMVis) 

 RooPTMVis::RooPTMVis(const char *name, const char *title, 
                        RooAbsReal& _pT,
                        RooAbsReal& _mVis,
                        RooAbsReal& _T,
                        RooAbsReal& _n,
                        RooAbsReal& _Lambda) :
   RooAbsPdf(name,title), 
   pT("pT","pT",this,_pT),
   mVis("mVis","mVis",this,_mVis),
   T("T","T",this,_T),
   n("n","n",this,_n),
   Lambda("Lambda","Lambda",this,_Lambda)
 { 
 } 


 RooPTMVis::RooPTMVis(const RooPTMVis& other, const char* name) :  
   RooAbsPdf(other,name), 
   pT("pT",this,other.pT),
   mVis("mVis",this,other.mVis),
   T("T",this,other.T),
   n("n",this,other.n),
   Lambda("Lambda",this,other.Lambda)
 { 
 } 

Double_t RooPTMVis::visMass1D() const
{
   if(mVis<0) return 1e-13;
   return TMath::Exp(Lambda*mVis);
}

Double_t RooPTMVis::tsallis() const
{
   if(pT<0) return 1e-13;
   double mt(sqrt(mVis*mVis+pT*pT));
   double C( 1. / (n*T+(n-2)*mVis)  ) ;
   return pT*C*TMath::Power( 1+((mt-mVis)/(n*T)), -n);
}

Double_t RooPTMVis::evaluate() const 
{ 
   if(mVis<0 || pT<0) return 1e-13;
   double ret(tsallis()*visMass1D());
   return ret;
} 



